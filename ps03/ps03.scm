;;; Author: Andi Liu
;;; Date: Mar 20

#|
Dear Professor Sussman,

I encountered some doubts while reading Section 3.2 (Extensible Generic Procedures) over and over again to figure out the interfaces. The goal of submitting psets, as you said, is to talk about what I have learned and what I want to learn more about. This essay does just that. I call it "The Paradox of Elegance: Mud Huts and Diamond Palaces", and I am eager to hear your thoughts.
|#

#|
"Diamond-like systems are beautiful, but it is very hard to add to a diamond. 
If a system is built as a ball of mud, it is easy to add more mud."

In class, you discussed the distinction between diamond-like systems and ball-of-mud-like systems. A ball of mud is simple, flexible, and easy to modify, while a diamond is intricate, rigid, and hard to modify. You advocate for the ball-of-mud approach, using "generic procedures" that could be modified after creation by adding different handlers that can be applied to different situations. You argue that, after we build procedures, they can often be adapted to new situations. A monolithic chess program can only do chess, but a general board game program initially written for chess can be adapted to checkers. Arithmetic could be generalized by redefining "plus" procedures to enable addition between numbers and symbols, allowing a program that used to give you numbers to give you a formula instead. You argue that this is what generality means - this is the ball-of-mud system you can always add to. You can develop a codebase over a lifetime, know it inside-out, and the most significant pleasure is the domain-specific insight it gives you, like understanding kinds of rules a board game might have, or how this variable affects the differential equation describing this physical scenario.

However, I think in a broader context, your system actually resembles a diamond-like system, brilliant inside but hard to adapt. Let me explain. Programmers program for a different reason nowadays. Programmers today often program to achieve goals, and those goals are often constantly changing because what is cutting-edge today is often obsolete tomorrow. Jupyter notebook is a manifestation of this philosophy, where maintenance is secondary to rapidly prototyping and testing ideas. Instead of perfecting a code base, developers often abandon notebooks that no longer serve their purpose. In this way, the focus is on building up temporary "mud huts" that can be quickly discarded in favor of new, more promising approaches. They shape their mud huts however they like, and when the mud hardens, they just shrug and find a new spot to start on a new hut that tests a different architectural idea. In contrast, your philosophy of developing a code base over a lifetime seems less adaptable, because while you can easily switch from chess to checkers, they can easily abandon chess and move on to Alpha Go, because their mud huts are crappy so there is not much wasted effort. This idea of minimum viable product and planned obsolescence is a uniquely modern invention, where things are created not to last but to be replaced, to be iterated on.

To contrast with mud huts, I would like to propose the metaphor of a diamond palace with high walls to illustrate the limitations of your approach. Once you have lived in a diamond palace for a while (read SDF and figure out the codebase), you can very comfortably do things you are familiar with. You know all the secret shortcuts from this garden to that garden (how to change a chess system to a checkers system), and, being the master artisan that you are, can even extend the balcony of your palace to see something further (extend your code base to do, say, matrix calculation). However, the comfort of a familiar lifestyle makes you forget there is a vast world beyond your palace and its walls, a vast world where the mud hut people measure with their feet. While it may have been easier for them to take the time to building a palace and settle down, they stay nomads, learning how to live in jungles, deserts, savannahs, etc. many distinct things you can do with programming languages such as machine learning, web development, system security) while you grow more and more comfortable within your room (Scheme). When you want food you don't go out and hunt deer (build entirely new systems in new fields not possible to create by just extending the system), but you have your chef make you a cake (extend the existing system). Life inside a wall is easy, but if you get too comfortable living inside the walls, they become limiting, and you miss out on what is beyond the horizon from your balcony.

When you have a hammer, you see everything as nails; When you have a code base, the only things you can think of doing are things you
can extend your code base to do. Programming language is not only the vehicle of our thought but also the driver - in this case a particularly conservative one that only drivers at 15 mph on roads that it knows well. The system started as a ball of mud, but as you continue to rub that ball of mud, it becomes shinier and shinier and it takes on this regular shape; it becomes so intricate that people have to read a book and take a class to understand how to add to it. It becomes the jewel on the crown in the throne room of your mental palace, and you stop looking outside the walls - what is there to look at anyway? All you need to look at is in this
room, right?
|#

#|
---- Afterwords ----
I hope you don't see this essay as a personal attack on your philosophy because it is not. I find your philosophies on programming, general science, and life immensely interesting, but I couldn't help but have doubt about its relevance in today's fast-paced world. These are *inner* doubts:  Everyone is moving so fast nowadays, hopping from project to project, company to company, and that can seem like the right way to do it, because when you are starting you need to absorb wildly different ideas like a sponge, right?

Only while trying to compose my ideas for this essay I realized how well your philosophy worked out for you. You programmed for 40 years and developed a system that helped you solve anything you are interested in. You could be content with taking a stroll in the garden of your mental palace because you know this is all you want. I can't do that. As a teenager, I have to go on adventures and find out what I am interested in. So my task is not to extend, but to establish.

Regardless, the metaphor of diamond and ball-of-mud is one I will keep revisiting. The goal of contrasting two approaches is not to start a holy war, but to reconcile, to find something in-between that will work for me. On that note, please don't hesitate to point out what I understood wrong to help me see better.
|#